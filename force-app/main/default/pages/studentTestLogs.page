<apex:page showHeader="false" sidebar="false" standardStylesheets="false" applyHtmlTag="true" controller="studentProfileController">
    <head>
        <title>Novigo | Test Logs</title>
    </head>
    <style>

        :root {
            --blue-color: #150958;
            --blue-color-hover: #200e89;
            --blue-color-hover-alt: #312a5a;
            --blue-color-select: #534798;
            --text-color: black;
            --background-color: white;
            --red-color: #EF233C;
            --yellow-color: #ffb01d;

            --green-color: #008000;
        }

        * {
            margin: 0;
            padding: 0;
            font-family: 'Poppins', sans-serif;
        }





        .hide {display: none;}
        .loader {
            display: flex;
            justify-content: center;
            align-items: center;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        .loader-logo{
            position: absolute;
            top: 50;
            left: 50;
        }

        .loader-logo .logo-section-one {
            animation: moveOne 1.25s infinite alternate;
        }

        .loader-logo .logo-section-two {
            animation: moveTwo 1.25s infinite alternate;
        }

        @keyframes moveOne {
            0%, 100% {
                fill: white;
                transform: translate(-15px, -25px);
                opacity: 0;
                
            }
            50% {
                fill: var(--red-color);
                transform: translate(0, 0);
                opacity: 1;
            }
        }

        @keyframes moveTwo {
            0%, 100% {
                fill: white;
                transform: translate(10px, 10px);
                opacity: 0;
            }
            50% {
                fill: var(--red-color);
                transform: translate(0, 0);
                opacity: 1;
            }
        }
        .hidden {display: none;}


        .main {
            height: 100vh;
            width: 100%;
            display: flex;
            flex-direction: column;
            /* align-items: center; */
        }

        .header {
            height: 10vh;
            width: 100%;
            background: black;
            display: flex;
            align-items: center;
            justify-content: space-between
        }

        .novigo-icon {
            height: 6vh;
            margin-left: 8px;
        }
        .novigo-icon-big{
            opacity: 0.05;
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: -1; 
            filter: grayscale(50%);
        }
        .title {
            /* margin-top: 4vh; */
            margin-right:4vh;
            display: flex;
            justify-content: center;
            align-items: center;
            position: sticky;
            top: 0;
            /* background-color: white; */
            z-index: 1;
        }

        .title-text {
            font-size: 2vw;
            font-family: 'Poppins', sans-serif;
            font-weight: 500;
            color: var(--background-color);
        }

        .log-text{
            margin: 1vh;
        }
        .malicious-log {
            color: var(--red-color);
            font-weight: bold;
        }

        .submission-log {
            color: var(--green-color);
            font-weight: bold;
        }
        .common-log{
            color: var(--blue-color);
        }
        .logContainer{
            padding-left: 2vh;
        }
        .infoContainer{
            padding: 2vh;
            padding-top: 0;
            font-size: 14px;
            color: var(--blue-color);
        }
        .heading{
            font-size: 30px;
            padding: 2vh;
            color: var(--blue-color);
        }
        .semi-heading{
            font-size: 18px;
            font-weight:500;
            padding: 2vh;
            color: var(--blue-color);
        }

        .table-main{
            border: 1px;
            border-color: var(--blue-color);
        }



        
        
    </style>

    <head>
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous"/>
        <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,800;1,100;1,200;1,300;1,400;1,500;1,800&display=swap" rel="stylesheet"/>
        <title>Novigo | Logs</title>
    </head>
    <div class="loader">
        <div class="loader-logo loader-logo-animation">
            <svg width="120" height="120" viewBox="0 0 61 51" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M30.8919 50.5334C33.472 46.3136 35.8983 42.4107 38.2198 38.4516C38.447 38.062 38.1813 37.2563 37.8911 36.7808C30.6681 24.8707 23.4241 12.9705 16.1242 1.10328C15.7781 0.541945 14.9355 0.0697652 14.2502 0.0565574C9.65982 -0.0325952 5.0659 0.0103303 0 0.0103303C10.3486 16.9361 20.5293 33.5845 30.8919 50.5334Z" fill="white"/>
                <path class="logo-section-one" d="M21.9257 0.0785001C28.4739 10.7867 34.8054 21.135 41.3047 31.7607C43.8779 27.5738 46.3182 23.6643 48.6536 19.7053C48.8844 19.3123 48.6641 18.5133 48.3844 18.0444C44.9897 12.4146 41.567 6.80127 38.0743 1.22428C37.7422 0.692662 36.8996 0.137935 36.2843 0.124727C31.6869 0.0322727 27.0825 0.0751975 21.9257 0.0751975V0.0785001Z" fill="#EF233C"/>
                <path class="logo-section-two" d="M60.6489 0.124756H45.0002C47.6293 4.4404 50.1395 8.56784 52.7965 12.9264C55.4326 8.62727 57.9394 4.54276 60.6489 0.124756Z" fill="#EF233C"/>
            </svg>
        </div>
        <div class="loader-inner"></div>
    </div>

    <div class="main">
        <div class="header">
            <div>
                <img class="novigo-icon" src="{!URLFOR($Resource.novigo_logo)}" alt="Novigo Icon"/>
            </div>
            <div class="title" id="downloadPdfButtonBackup">
                <!-- <svg style="margin-right: 1vw;" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="white" d="M11 9c0 1.66-1.34 3-3 3s-3-1.34-3-3s1.34-3 3-3s3 1.34 3 3m3 11H2v-2c0-2.21 2.69-4 6-4s6 1.79 6 4m8-6v2h-9v-2m9-4v2h-9V8m9-4v2h-9V4Z"/></svg> -->
                <span class="title-text">Dev | v1.02 | Logs</span>
            </div>
        </div>
        <span class="heading">Current Student Logs</span>
        <div id="logsDisplay" class="logContainer">
            <table id="logTable" class="table-main">
                <tr>
                    <th>TYPE</th>
                    <th>TIMESTAMP</th>
                </tr>
            </table>
        </div>
        <span class="semi-heading">Statistics</span>
        <div id="infoDisplay" class="infoContainer"></div>
    </div>




    <script>
        function showLoader() {
            document.querySelector(".loader").classList.remove("hidden");
        }

        function hideLoader() {
            document.querySelector(".loader").classList.add("hidden");
        }

        function getURLParams() {
            const urlParams = new URLSearchParams(window.location.search);
            const eventId = urlParams.get('eventId');
            const studentId = urlParams.get('studentId');
            
            retrieveLogs(eventId, studentId);
        }

        function retrieveLogs(eventId, studentId) {
            showLoader();
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.studentProfileController.retrieveStudentLogs}',
                eventId,
                studentId,
                function (result, event) {
                    if (event.status) {
                        console.log(result);
                        try {
                            
                            const logsArray = result;

                            const loginLog = "null";
                            const submitLog = "null"; 

                            if (logsArray && Array.isArray(logsArray) && logsArray.length > 0) {
                                let loginTime = null;
                                let submissionTime = null;


                                const formattedLogs = logsArray.map(log => {
                                    const logParts = log.split(']');
                                    const logType = logParts[0].slice(1); 
                                    const logContent = logParts.slice(1).join(']').trim(); 
                                    let logStyleClass = 'log-text common-class';
                                        if (logType.includes('MALICIOUS')) {
                                            logStyleClass = 'log-text malicious-log';
                                        } else if (logType.includes('LOGIN')) {
                                            loginTime = logContent;
                                            logStyleClass = 'log-text submission-log';
                                        }
                                        else if (logType.includes('SUBMISSION')){
                                            submissionTime = logContent;
                                            logStyleClass = 'log-text submission-log';
                                        }
                                
                                        

                                        //return `<tr class="${logStyleClass} table-row" ><td class="table-data">${logType}</td> <td class="table-data">${logContent}</td></tr>`;
                                        return `<p class="${logStyleClass}">[${logType}] ${logContent}</p>`;
                                });

                            const tableHeaders = `      <tr class="table-row">
                                                            <th class="table-header" >TYPE</th>
                                                            <th class="table-header">ACTIVITY</th>
                                                        </tr>
                                                `

                                console.log("formatted logs" + formattedLogs);

                                document.getElementById('logTable').innerHTML = 
                                //tableHeaders + 
                                formattedLogs.join('');

                                console.log(`Login time ${loginTime} and Sub Time is ${submissionTime}`);

                                if (loginTime !== null && submissionTime !== null) {
                                    const loginTimestamp = loginTime.match(/\[(.*?)\]/)[1];
                                    const submissionTimestamp = submissionTime.match(/\[(.*?)\]/)[1];

                                    const loginDate = new Date(loginTimestamp);
                                    const submissionDate = new Date(submissionTimestamp);

                                    const durationMs = submissionDate - loginDate;

                                    const durationMinutes = Math.floor(durationMs / (1000 * 60));
                                    const durationSeconds = Math.floor((durationMs / 1000) % 60);

                                    console.log(`Duration: ${durationMinutes} minutes ${durationSeconds} seconds`);

                                    const formattedDuration = `${durationMinutes} minutes ${durationSeconds} seconds.`;

                                    document.getElementById('infoDisplay').innerText = `Test Duration: ${formattedDuration}`;
                                } else {
                                    document.getElementById('infoDisplay').innerText = 'Login or submission timestamp not found.';

                                }
                            } else {
                                document.getElementById('logsDisplay').innerText = 'No logs found.';
                            }
                        } catch (error) {
                            document.getElementById('logsDisplay').innerHTML =  `<i><b>ERROR:</i> Unable to Fetch Logs</b> <br> <i> ${error} </i>`;
                            console.error('Error parsing JSON:', error);
                        }
                    } else {
                        document.getElementById('logsDisplay').innerHTML = `<b><i>FATAL ERROR:</i> Remote Call Failed</b> </br> <i> ${event.message} </i> `;
                        console.error(event.message);
                        
                    }
                    hideLoader();
                }

    );

    
}








        window.onload = getURLParams;
    </script>

    
</apex:page>